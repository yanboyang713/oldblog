<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Boyang Yan's Tech Blog</title><link>https://yanboyang.com/</link><description>This is Boyang Yan's Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>yanboyang713@gmail.com (Boyang Yan)</managingEditor><webMaster>yanboyang713@gmail.com (Boyang Yan)</webMaster><lastBuildDate>Fri, 24 Sep 2021 06:11:32 +1000</lastBuildDate><atom:link href="https://yanboyang.com/index.xml" rel="self" type="application/rss+xml"/><item><title>An introduction for Git</title><link>https://yanboyang.com/git/</link><pubDate>Fri, 24 Sep 2021 06:11:32 +1000</pubDate><author>Author</author><guid>https://yanboyang.com/git/</guid><description>Git Cli Install If you facing this ERROR message (bash: gh: command not found), please following this document installing gh on your Linux first. Below section, I will tell you how to use Make to management your package.
1 sudo pacman -S github-cli Login Step1:
1 2 3 4 [yanboyang713@Boyang-PC dotfiles]$ gh auth login ? What account do you want to log into? [Use arrows to move, type to filter] &amp;gt; GitHub.</description></item><item><title>Managing Your Dotfiles With Git and Make</title><link>https://yanboyang.com/dotfiles/</link><pubDate>Wed, 22 Sep 2021 06:11:32 +1000</pubDate><author>Author</author><guid>https://yanboyang.com/dotfiles/</guid><description>Introduction User-specific application configuration is traditionally stored in so called dotfiles (files whose filename starts with a dot). It is common practice to track dotfiles with a version control system such as Git to keep track of changes and synchronize dotfiles across various hosts. There are various approaches to managing your dotfiles. In this article, I will talk about How to use Make with Git to management your dotfiles and package.</description></item><item><title>Beginners Guide to Ham Radio</title><link>https://yanboyang.com/ham/</link><pubDate>Thu, 16 Sep 2021 06:11:32 +1000</pubDate><author>Author</author><guid>https://yanboyang.com/ham/</guid><description>Coaxial Cable http://www.m5bxb.com/coaxlengthcalc.htm Connector https://shop33395161.taobao.com/p/rd262982.htm https://shop33395161.taobao.com/p/rd770430.htm
Dummy load vector network analyzer</description></item><item><title>Getting Started with Doom Emacs</title><link>https://yanboyang.com/doom/</link><pubDate>Wed, 15 Sep 2021 06:11:32 +1000</pubDate><author>Author</author><guid>https://yanboyang.com/doom/</guid><description>Prerequisites Git 2.23+ Emacs 27.1+ (27.2 is recommended, or native-comp). ripgrep 11.0+ GNU find OPTIONAL: fd 7.3.0+ (improves file indexing performance for some commands)
Instation Install Emacs Mac Arch Linux 1 2 3 4 # required dependencies pacman -S git emacs ripgrep # optional dependencies pacman -S fd ubuntu 1 2 3 4 # Ubuntu emacs sudo add-apt-repository ppa:kelleyk/emacs sudo apt-get update sudo apt install emacs27 Install Doom Emacs 1 2 3 4 5 6 7 8 # Clone Doom Eemacs rm -r ~/.</description></item><item><title>Getting Started with Emacs</title><link>https://yanboyang.com/emacs/</link><pubDate>Wed, 15 Sep 2021 06:11:32 +1000</pubDate><author>Author</author><guid>https://yanboyang.com/emacs/</guid><description>Installation Run Emacs in Docker https://github.com/Silex/docker-emacs
Usage Console 1 docker run -it --rm silex/emacs GUI 1 2 xhost +local:root # WARN: this comes with security issues docker run -it --rm -e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix silex/emacs Arch Linux (Manjaro) 1 yay -S emacs macOS Prerequisites 1 2 # Installs clang xcode-select --install emacs-mac. It offers good integration with macOS, native emojis and better childframe support 1 2 3 brew tap railwaycat/emacsmacport brew install emacs-mac --with-modules ln -s /usr/local/opt/emacs-mac/Emacs.</description></item><item><title>Getting Started reproducible research with GNU Emacs</title><link>https://yanboyang.com/research/</link><pubDate>Sun, 12 Sep 2021 06:11:32 +1000</pubDate><author>Author</author><guid>https://yanboyang.com/research/</guid><description>Introduction Prerequirements Notes The idea is to be able to create notes for all kinds of content. Specifically, papers or books, along with webpages. This then requires a separate system for each which is described by:
Search Engine The search engine is key, both in terms of accessibility and scalability. It is assumed that there will be many notes, and that they will have a wide variety of content. The search interface must then simply allow us to narrow down our candidates in a meaningful manner.</description></item><item><title>Getting Started with Zotero</title><link>https://yanboyang.com/zotero/</link><pubDate>Sun, 12 Sep 2021 06:11:32 +1000</pubDate><author>Author</author><guid>https://yanboyang.com/zotero/</guid><description>Introduction Why Use Zotero? Be Organized: Keep all of your research and citations in one place Save time: Format fewer citations by hand Collaborate: Work with anyone in the world, anytime It&amp;rsquo;s Free: No cost even after you Zotero Installation 1 yay -S zotero Launch Zotero Create a Zotero Account If you haven’t already created a Zotero account, please take a few moments to register now Here.</description></item><item><title>Introduction to Python Virtual Environments and Dependency Managers</title><link>https://yanboyang.com/pythonvirtualenvironments/</link><pubDate>Wed, 08 Sep 2021 06:11:32 +1000</pubDate><author>Author</author><guid>https://yanboyang.com/pythonvirtualenvironments/</guid><description>Introduction Virtual environments. What are they and what are they used for? This article will be a beginner’s guide to virtual environments and dependency managers in Python. We will also look at five of the most used dependency managers in Python.
A virtual environment is an isolated Python environment where a project’s dependencies are installed in a different directory from those installed in the system’s default Python path and other virtual environments.</description></item><item><title>An introduction to Magit, an Emacs mode for Git</title><link>https://yanboyang.com/magit/</link><pubDate>Thu, 02 Sep 2021 06:11:32 +1000</pubDate><author>Author</author><guid>https://yanboyang.com/magit/</guid><description>Introduction Magit is arguably the best Git tool out there and also my favorite. It is a package in Emacs, and it is text based.
Magit init, commit and commit messages Init create a repositories from a floder SPC g i(magit-init)
Add all of files to staged SPC u S
Checking staged files changed contect Move cursor to staged files, click TAB check what is changed
Commit c c then use c-c c-c to finish commit</description></item><item><title>Getting Started with Org Roam - Build a Second Brain in Emacs</title><link>https://yanboyang.com/roam/</link><pubDate>Thu, 02 Sep 2021 06:11:32 +1000</pubDate><author>Author</author><guid>https://yanboyang.com/roam/</guid><description>Introduction Org-roam is a plain-text knowledge management system. Org-roam is a tool for networked thought. It reproduces some of Roam Research’s 1 key features within Org-mode.
Org-roam borrows principles from the Zettelkasten method, providing a solution for non-hierarchical note-taking. It should also work as a plug-and-play solution for anyone already using Org-mode for their personal wiki.
Org-roam provides these benefits over other tooling:
Privacy and Security: Your personal wiki belongs only to you, entirely offline and in your control.</description></item></channel></rss>