<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>Emacs - Tag - Boyang Yan's Tech Blog</title><link>https://yanboyang.com/tags/emacs/</link><description>Emacs - Tag - Boyang Yan's Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>yanboyang713@gmail.com (Boyang Yan)</managingEditor><webMaster>yanboyang713@gmail.com (Boyang Yan)</webMaster><lastBuildDate>Fri, 18 Mar 2022 12:58:00 +1100</lastBuildDate><atom:link href="https://yanboyang.com/tags/emacs/" rel="self" type="application/rss+xml"/><item><title>Getting Started Magit on Doom Emacs</title><link>https://yanboyang.com/magit/</link><pubDate>Fri, 18 Mar 2022 12:58:00 +1100</pubDate><author>yanboyang713@gmail.com</author><dc:creator>Boyang Yan</dc:creator><guid>https://yanboyang.com/magit/</guid><description>Introduction This article is intended as a quick and dirty reference for the &amp;ldquo;Magit&amp;rdquo; Git interface in Doom Emacs.
Magit is arguably the best Git tool out there and also my favorite. It is a package in Emacs, and it is text based.
Commands Initialize create a Git Repository from a floder
1 SPC g i or,
1 M-x magit-init Navigate to the Magit Window:
1 SPC-g-g or C-x g staged and unstaged Add all of files to staged</description></item><item><title>Getting Started with Org Roam</title><link>https://yanboyang.com/orgroam/</link><pubDate>Wed, 29 Dec 2021 15:08:00 +0800</pubDate><author>yanboyang713@gmail.com</author><dc:creator>Boyang Yan</dc:creator><guid>https://yanboyang.com/orgroam/</guid><description>Set-up org roam</description></item><item><title>Using Emacs Org-Babel Mode to Write Literate Programming Documents</title><link>https://yanboyang.com/orgbabel/</link><pubDate>Fri, 17 Dec 2021 10:29:00 +0800</pubDate><author>yanboyang713@gmail.com</author><dc:creator>Boyang Yan</dc:creator><guid>https://yanboyang.com/orgbabel/</guid><description>Introduction We introduce the use of emacs org-babel model in this document. Emacs Org-Babel mode is a literate programming tool (aka. active document), which can embed multiple programming languages, inlcuding R, Python, C/C++ in one document. Babel has ability to execute source code within Org-mode documents.
Pre-reading Emacs/Getting Started Org-mode on Emacs Source Code Insert &amp;amp; Running Here is an format example:
1 2 #+BEGIN_SRC language #+END_SRC Reference List https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-C.html https://orgmode.</description></item><item><title>Best practices for using Emacs org-mode as a day-planner/scheduler/calendar</title><link>https://yanboyang.com/orgplanning/</link><pubDate>Thu, 16 Dec 2021 18:28:00 +0800</pubDate><author>yanboyang713@gmail.com</author><dc:creator>Boyang Yan</dc:creator><guid>https://yanboyang.com/orgplanning/</guid><description>Pre-reading Emacs/Getting Started Org-mode on Emacs Checkbox It often great to split a task into a number of simple steps. Or you can use them in a shopping list.
The form is [], put in front of the task can mark the completion status of the task, Put it after the task to mark the completion degree of the task, which needs to add % or /
Here is an example of a checkbox list.</description></item><item><title>Getting Started Org-mode on Emacs</title><link>https://yanboyang.com/org-mode/</link><pubDate>Wed, 15 Dec 2021 11:29:00 +0800</pubDate><author>yanboyang713@gmail.com</author><dc:creator>Boyang Yan</dc:creator><guid>https://yanboyang.com/org-mode/</guid><description>Introduction Org mode is an artifact under Emacs. Compared with the lightweight format of markdown, It has more functions and expandability, but it is still difficult to get started. Here is only a brief introduction to some of the basic functions.
Pre-reading Emacs/Getting Started with Doom Emacs :Emacs:Doom-Emacs: Fundamental Feature Headings org-mode uses * to indicate headings, and the number of * to indicate heading level:
1 2 3 * First level heading ** Secondary heading *** Level 3 heading Use the Control-[RET] key to insert the title of the same level, and you can use the Alt-left/right title to increase and decrease the level Using Alt-Up and Alt-Down swap the Headings content Up and Down (including sub-chapters).</description></item><item><title>Building a Second Brain</title><link>https://yanboyang.com/secondbrain/</link><pubDate>Tue, 07 Dec 2021 10:18:00 +0800</pubDate><author>yanboyang713@gmail.com</author><dc:creator>Boyang Yan</dc:creator><guid>https://yanboyang.com/secondbrain/</guid><description>Introduction Building a Second Brain is about creating a reliable system – outside your physical skin-and-bone bodily boundaries – for storing, organising, digesting, and eventually transforming information into Good Creative Output.
Much like any well-integrated tool, I am currently using Emacs Org Mode as Second Brain core tool. This system also includes many other peripheral components that make up the complete Second Brain system.
I will follow the below overview diagram introducte each components one by one.</description></item><item><title>Getting Started with Doom Emacs</title><link>https://yanboyang.com/doom/</link><pubDate>Tue, 05 Oct 2021 03:44:00 +0800</pubDate><author>yanboyang713@gmail.com</author><dc:creator>Boyang Yan</dc:creator><guid>https://yanboyang.com/doom/</guid><description>Prerequisites Instation Arch Linux 1 2 3 4 5 6 # required dependencies pacman -S git emacs ripgrep # optional dependencies pacman -S fd yay -S emacs-pdf-tools-git ``` With Emacs and Doom’s dependencies installed, next is to install Doom Emacs itself:
1 2 git clone https://github.com/hlissner/doom-emacs ~/.emacs.d ~/.emacs.d/bin/doom install Sart-up https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/ Install the icons to avoid having weird symbols. M-x all-the-icons-install-fonts
Note: M-x is SPC :
Open a file
SPC f f OR SPC .</description></item><item><title>Getting Started with Emacs</title><link>https://yanboyang.com/emacs/</link><pubDate>Wed, 15 Sep 2021 06:11:32 +1000</pubDate><author>yanboyang713@gmail.com</author><dc:creator>Boyang Yan</dc:creator><guid>https://yanboyang.com/emacs/</guid><description>Installation Run Emacs in Docker https://github.com/Silex/docker-emacs Usage Console 1 docker run -it --rm silex/emacs GUI 1 2 xhost +local:root # WARN: this comes with security issues docker run -it --rm -e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix silex/emacs Arch Linux (Manjaro) 1 yay -S emacs macOS Prerequisites 1 2 # Installs clang xcode-select --install emacs-mac. It offers good integration with macOS, native emojis and better childframe support 1 2 3 brew tap railwaycat/emacsmacport brew install emacs-mac --with-modules ln -s /usr/local/opt/emacs-mac/Emacs.</description></item><item><title>Getting Started with Spacemacs</title><link>https://yanboyang.com/spacemacs/</link><pubDate>Sun, 04 Apr 2021 06:11:32 +1000</pubDate><author>yanboyang713@gmail.com</author><dc:creator>Boyang Yan</dc:creator><guid>https://yanboyang.com/spacemacs/</guid><description><![CDATA[Prerequisites emacs 1 yay -S adobe-source-code-pro-fonts clone spacemacs repo and use develop branch
1 git clone https://github.com/syl20bnr/spacemacs.git ~/.emacs.d -b develop clone zilongshanren layer and checkout develop branch
1 git clone https://github.com/yanboyang713/spacemacs-private.git ~/.spacemacs.d/ 1 2 3 4 [yanboyang713@boyang ~]$ gpg --homedir ~/.emacs.d/elpa/gnupg --receive-keys 066DAFCB81E42C40 gpg: key 066DAFCB81E42C40: &#34;GNU ELPA Signing Agent (2019) &lt;elpasign@elpa.gnu.org&gt;&#34; not changed gpg: Total number processed: 1 gpg: unchanged: 1 Day 11 Topic: Spacemacs introduction and installation
Why Spacemacs?]]></description></item><item><title>Getting started with UML (Unified Modeling Language)</title><link>https://yanboyang.com/plantuml/</link><pubDate>Tue, 01 Sep 2020 06:11:32 +1000</pubDate><author>yanboyang713@gmail.com</author><dc:creator>Boyang Yan</dc:creator><guid>https://yanboyang.com/plantuml/</guid><description>Introduction This post document will brief introduct UML at the begining. After, will talk how using PlantUML for drawing UML diagrams. At the end, how does PlantUML integrate with Markdown and Emacs(Spacemacs).
UML Basics PlantUML Basics Reasons for using PlantUML Markdown Emacs (Spacemacs) Summary</description></item></channel></rss>