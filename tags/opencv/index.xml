<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>OpenCV - Tag - My New Hugo Site</title><link>http://example.org/tags/opencv/</link><description>OpenCV - Tag - My New Hugo Site</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 06 Feb 2021 06:11:32 +1000</lastBuildDate><atom:link href="http://example.org/tags/opencv/" rel="self" type="application/rss+xml"/><item><title>Getting started with Opencv</title><link>http://example.org/opencv/</link><pubDate>Sat, 06 Feb 2021 06:11:32 +1000</pubDate><author>Author</author><guid>http://example.org/opencv/</guid><description>Introduction OpenCV is a popular framework widely used in the development of products for intelligent video analytics. Such solutions use both classic algorithms of computer vision (e.g. an algorithm for optical flow detection), and AI-based approaches, in particular, neural networks.
Installing with Docker build:
1 docker build -t my_pi_opencv_img . run:
1 2 3 4 5 6 docker run -it --rm \ -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY \ -v /home/yanboyang713/Documents/imagezmq:/home \ --name my_opencv_app_run \ my_pi_opencv_img \ /bin/bash python -c &amp;ldquo;import cv2; print(cv2.</description></item><item><title>High-performance Scalable Realtime Distributed Video Processing</title><link>http://example.org/realtimedistributedvideoprocessing/</link><pubDate>Sat, 06 Feb 2021 06:11:32 +1000</pubDate><author>Author</author><guid>http://example.org/realtimedistributedvideoprocessing/</guid><description>Introduction Opencv</description></item><item><title>Extented Image Training Set Tips</title><link>http://example.org/extentedimagetrainingset/</link><pubDate>Mon, 07 Sep 2020 06:11:32 +1000</pubDate><author>Author</author><guid>http://example.org/extentedimagetrainingset/</guid><description>Introduction Regardless of the algorithm and framework used to train the neural network, the amount of image data is always an important prerequisite for determining the quality of the training model. Data expansion is a common method for training models, which is very important for the robustness and accuracy of the model. This post document will use OpenCV to show some of tips for how we can extented image training set.</description></item><item><title>Getting started with Basler Camera With Opencv on Python</title><link>http://example.org/baslerwithopencv/</link><pubDate>Thu, 03 Sep 2020 06:11:32 +1000</pubDate><author>Author</author><guid>http://example.org/baslerwithopencv/</guid><description>Introduction This post document is about using Basler Camera with Opencv on Python. At the beginning of this guide I will introduct how to set-up development environment with Pylon and opencv within Conda virual environment. Seconly, I will talk about how to check and set some of basic Basler feature base on pypylon. At the end, I will give a example about using Opencv read Basler Camera data stream.
Hardware and Software Testing Environment Hardware Environment Camera: Basler (a2A1920 - 51gcPRO) Network Adapter: Intel I350 Gigabit Network adapter (POE) CPU: Intel(R) Core(TM) i7-9700F CPU @ 3.</description></item><item><title>Getting started with Multi-Basler Trigger Asynchronous</title><link>http://example.org/baslertriggerasynchronous/</link><pubDate>Thu, 02 Jan 2020 06:11:32 +1000</pubDate><author>Author</author><guid>http://example.org/baslertriggerasynchronous/</guid><description>Introduction Software Trigger Asynchronous Synchronous Free Run https://docs.baslerweb.com/synchronous-free-run The Synchronous Free Run camera feature allows you to capture images on multiple cameras at the same time and the same frame rate.
How It Works If you are using multiple cameras in free run mode, image acquisition is slightly asynchronous due to a variety of reasons, e.g., the camera&amp;rsquo;s individual timings and delays. The Synchronous Free Run feature allows you to synchronize cameras in free run mode.</description></item></channel></rss>